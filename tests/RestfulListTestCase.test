<?php

/**
 * @file
 * Contains RestfulListTestCase
 */

class RestfulListTestCase extends RestfulCurlBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'List entities',
      'description' => 'Test the listing of entities.',
      'group' => 'Restful',
    );
  }

  function setUp() {
    parent::setUp('restful_example', 'restful_test');
  }

  /**
   * Test the sorting of entities.
   */
  function testSort() {
    $settings = array('type' => 'article');

    $titles = array(
      'abc',
      'xyz',
      'efg',
    );
    foreach ($titles as $title) {
      $settings['title'] = $title;
      $node = $this->drupalCreateNode($settings);
      $nodes[$title] = $node->nid;
    }

    // Add unpublished node, to confirm it is not listed.
    $settings['status'] = NODE_NOT_PUBLISHED;
    $this->drupalCreateNode($settings);

    $handler = restful_get_restful_handler('articles');
    $request['fields'] = 'id,label';

    // No sorting (default sorting).
    $result = $handler->get('', $request);
    $expected_result = array(
      array(
        'id' => $nodes['abc'],
        'label' => 'abc',
      ),
      array(
        'id' => $nodes['xyz'],
        'label' => 'xyz',
      ),
      array(
        'id' => $nodes['efg'],
        'label' => 'efg',
      ),
    );
    $this->assertEqual($result, $expected_result, 'No sorting (default sorting).');

    // Sort by ID descending.
    $request['sort'] = '-id';
    $result = $handler->get('', $request);
    $expected_result = array(
      array(
        'id' => $nodes['efg'],
        'label' => 'efg',
      ),
      array(
        'id' => $nodes['xyz'],
        'label' => 'xyz',
      ),
      array(
        'id' => $nodes['abc'],
        'label' => 'abc',
      ),
    );
    $this->assertEqual($result, $expected_result, 'Sort by ID descending.');

    // Sort by label ascending.
    $request['sort'] = 'label';
    $result = $handler->get('', $request);
    $expected_result = array(
      array(
        'id' => $nodes['abc'],
        'label' => 'abc',
      ),
      array(
        'id' => $nodes['efg'],
        'label' => 'efg',
      ),
      array(
        'id' => $nodes['xyz'],
        'label' => 'xyz',
      ),
    );
    $this->assertEqual($result, $expected_result, 'Sort by label ascending.');

    // Sort by label and by ID. For that we add another node titled "abc".
    $settings = array(
      'type' => 'article',
      'title' => 'abc',
    );
    $node = $this->drupalCreateNode($settings);

    $request['sort'] = 'label,id';
    $result = $handler->get('', $request);
    $expected_result = array(
      array(
        'id' => $nodes['abc'],
        'label' => 'abc',
      ),
      array(
        'id' => $node->nid,
        'label' => 'abc',
      ),
      array(
        'id' => $nodes['efg'],
        'label' => 'efg',
      ),
      array(
        'id' => $nodes['xyz'],
        'label' => 'xyz',
      ),
    );
    $this->assertEqual($result, $expected_result, 'Sort by ID and by label.');

    // Illegal sort property.
    $request['sort'] = 'wrong_key';
    try {
      $handler->get('', $request);
      $this->fail('Illegal sort property used.');
    }
    catch (RestfulBadRequestException $e) {
      $this->pass('Exception thrown on illegal sort property.');
    }

    // Illegal sort property, descending.
    $request['sort'] = '-wrong_key';
    try {
      $handler->get('', $request);
      $this->fail('Illegal sort property, descending, used.');
    }
    catch (RestfulBadRequestException $e) {
      $this->pass('Exception thrown on illegal sort property, descending.');
    }

    // Test the administrator's content listing.
    $role_name = 'administrator';
    $handler = restful_get_restful_handler_by_name('per_role_content__1_0:' . $role_name);
    // Force the user 1 to be identified.
    $handler->setAccount(user_load(1));
    $settings = array(
      'type' => 'article',
      'title' => $this->randomName(),
      'uid' => 1,
    );
    $this->drupalCreateNode($settings);

    $request = array('fields' => 'roles');
    $response = $handler->get('', $request);
    foreach ($response as $item) {
      $roles = array_map('trim', explode(',', $item['roles']));
      $this->assertTrue(in_array($role_name, $roles), format_string('%role role found in content list.', array('%role' => $role_name)));
    }
  }

  /**
   * Test filtering.
   */
  function testFilter() {
    $this->addIntegerFields();
    $info = array(
      array(
        'title' => 'abc',
        'integer_single' => 1,
        'integer_multiple' => array(1, 2, 3),
      ),
      array(
        'title' => 'another abc',
        'integer_single' => 5,
        'integer_multiple' => array(3, 4, 5),
      ),
      array(
        'title' => 'last',
        'integer_single' => NULL,
        'integer_multiple' => array(),
      ),
    );

    $nodes = array();

    foreach ($info as $row) {
      $title = $row['title'];

      $settings = array(
        'type' => 'article',
        'title' => $title,
      );

      $settings['integer_single'][LANGUAGE_NONE][0]['value'] = $row['integer_single'];

      foreach ($row['integer_multiple'] as $key => $value) {
        $settings['integer_multiple'][LANGUAGE_NONE][$key]['value'] = $value;
      }

      $node = $this->drupalCreateNode($settings);
      $nodes[$title] = $node->nid;
    }

    $handler = restful_get_restful_handler('test_articles', 1, 2);
    $fields = array(
      'id',
      'label',
      'integer_single',
      'intger_multiple',
    );
    $request['fields'] = implode(',', $fields);


    // Single value property.
    $request['filter'] = array('label' => 'abc');
    $result = $handler->get('', $request);
    $this->assertEqual($result[0]['id'], $nodes['abc'], 'Filter list by single value property.');

    // Assert count is correct.
    $formatter_handler = restful_get_formatter_handler('hal_json', $handler);
    $output = $formatter_handler->prepare($result);
    $this->assertEqual($output['count'], 1, '"count" property is correct.');

    // Single value field.
    $request['filter'] = array('integer_single' => '1');
    $result = $handler->get('', $request);
    $this->assertEqual($result[0]['id'], $nodes['abc'], 'Filter list by Single value field.');

    // Multiple value field.
    $request['filter'] = array(
      'integer_multiple' => array(
        'value' => array(4, 5),
        'operator' => 'BETWEEN',
      ),
    );
    $result = $handler->get('', $request);
    $this->assertEqual($result[0]['id'], $nodes['another abc'], 'Filter list by multiple value field.');

    // Invalid key.
    $request['filter'] = array('invalid_key' => '3');
    try {
      $handler->get('', $request);
      $this->fail('No exception was thrown on invalid key for filter.');
    }
    catch (\RestfulBadRequestException $e) {
      $this->pass('Correct exception was thrown on invalid key for filter.');
    }
    catch (\Exception $e) {
      $this->fail('Incorrect exception was thrown on invalid key for filter.');
    }

    // Assert filtering doesn't apply for non-list request
    // (e.g. /api/v1/articles/1?filter[label]=foo), as this might be called from
    // a formatter plugin, after RESTful's error handling has finished.
    $query = array('filter' => array('invalid-key' => 'foo'));
    $result = $this->httpRequest('api/v1/articles/1', \RestfulInterface::GET, $query);
    $this->assertEqual($result['code'], '200', 'Invalid filter key was ignored on non-list query.');
  }

  /**
   * Test pagination.
   */
  function testPagination() {
    foreach(range(1, 9) as $key) {
      $settings = array(
        'type' => 'article',
        'title' => $key,
      );
      $this->drupalCreateNode($settings);
    }

    $handler = restful_get_restful_handler('articles');
    // Set a smaller range for the pagination.
    $handler->setRange(3);

    // Check pagination of first page.
    $result = $handler->get('', array('page' => 1));
    $output = drupal_json_decode($handler->format($result));
    $this->assertEqual(count($result), 3);
    $this->assertTrue($output['_links']['next'], '"Next" link exists on the first page.');
    $this->assertTrue(empty($output['_links']['previous']), '"Previous" link does not exist on the first page.');

    // Check pagination of middle pages
    $result = $handler->get('', array('page' => 2));
    $output = drupal_json_decode($handler->format($result));
    $this->assertTrue($output['_links']['next'], '"Next" link exists on the middle page.');
    $this->assertTrue($output['_links']['previous'], '"Previous" link exists on the middle page.');

    // Check pagination of last page.
    $result = $handler->get('', array('page' => 3));
    $output = drupal_json_decode($handler->format($result));
    $this->assertTrue(empty($output['_links']['next']), '"Next" link does not exist on the last page.');
    $this->assertTrue($output['_links']['previous'], '"Previous" link exists on the last page.');

    // Check other query strings are retained in the _links.
    $result = $handler->get('', array('page' => 3, 'sort' => '-id'));
    $output = drupal_json_decode($handler->format($result));
    $this->assertTrue(strpos($output['_links']['previous'], 'sort=-id'), 'Query strings are retained in the _links.');

    // Check pagination with non-numeric value.
    try {
      $handler->get('', array('page' => 'string'));
      $this->fail('No exception thrown for pagination with non-numeric value.');
    }
    catch (\RestfulBadRequestException $e) {
      $this->pass('Correct exception thrown for pagination with non-numeric value.');
    }
    catch (\Exception $e) {
      $this->fail('Incorrect exception thrown for pagination with non-numeric value.');
    }


    // Check pagination with 0 value.
    try {
      $handler->get('', array('page' => 0));
      $this->fail('No exception thrown for pagination with 0 value.');
    }
    catch (\RestfulBadRequestException $e) {
      $this->pass('Correct exception thrown for pagination with 0 value.');
    }
    catch (\Exception $e) {
      $this->fail('Incorrect exception thrown for pagination with 0 value.');
    }

    // Check pagination with high number, where there are not items, yielded no
    // results, but is a valid call.
    $result = $handler->get('', array('page' => 100));
    $this->assertEqual($result, array(), 'pagination with high number, where there are not items yielded no results.');

    // Check total number of results.
    $result = $handler->get('', array('page' => 3));
    $output = drupal_json_decode($handler->format($result));
    $this->assertEqual($output['count'], 9, 'Total count exists and is correct.');
  }

  /**
   * Helper function; Add single and multiple integer fields.
   */
  private function addIntegerFields() {
    // Integer - single.
    $field = array(
      'field_name' => 'integer_single',
      'type' => 'number_integer',
      'entity_types' => array('node'),
      'cardinality' => 1,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'integer_single',
      'bundle' => 'article',
      'entity_type' => 'node',
      'label' => t('Integer single'),
    );
    field_create_instance($instance);

    // Integer - multiple.
    $field = array(
      'field_name' => 'integer_multiple',
      'type' => 'number_integer',
      'entity_types' => array('node'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'integer_multiple',
      'bundle' => 'article',
      'entity_type' => 'node',
      'label' => t('Integer multiple'),
    );
    field_create_instance($instance);
  }
}
