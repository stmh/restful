<?php

/**
 * @file
 * Contains RestfulHookMenuTestCase
 */

class RestfulHookMenuTestCase extends RestfulCurlBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Menu API',
      'description' => 'Test the hook_menu() and delivery callback implementations.',
      'group' => 'Restful',
    );
  }

  function setUp() {
    parent::setUp('restful_example');

    // Allow anonymous users to edit articles.
    user_role_change_permissions(DRUPAL_ANONYMOUS_RID, array('edit any article content' => TRUE));
  }

  /**
   * Test viewing an entity (GET method).
   */
  function testViewEntity() {
    $user1 = $this->drupalCreateUser();

    $title = $this->randomName();
    $settings = array(
      'type' => 'article',
      'title' => $title,
      'uid' => $user1->uid,
    );
    $node1 = $this->drupalCreateNode($settings);

    // Test version 1.0
    $result = $this->httpRequest('api/v1/articles/' . $node1->nid);
    $expected_result = array(
      'data' => array(array(
        'id' => $node1->nid,
        'label' => $node1->title,
        'self' => url('node/' . $node1->nid, array('absolute' => TRUE)),
      )),
    );

    $this->assertEqual($result['body'], json_encode($expected_result));

    // Test version 1.1
    $headers = array('X-Restful-Minor-Version' => '1');
    $result = $this->httpRequest('api/v1/articles/' . $node1->nid, \RestfulInterface::GET, NULL, $headers);
    unset($expected_result['data'][0]['self']);
    $this->assertEqual($result['body'], json_encode($expected_result));

    // Test method override.
    $headers = array('X-HTTP-Method-Override' => \RestfulInterface::PATCH);
    $body = array(
      'label' => 'new title',
    );
    $this->httpRequest('api/v1/articles/' . $node1->nid, \RestfulInterface::POST, $body, $headers);

    $node1 = node_load($node1->nid);
    $this->assertEqual($node1->title, 'new title', 'HTTP method was overriden.');


  }

  /**
   * Test HTTP headers change according to the response.
   */
  function testHttpHeadersAndStatus() {
    // Valid request (eventough it's empty).
    $result = $this->httpRequest('api/v1/articles/', \RestfulInterface::GET);
    $this->assertTrue(strpos($result['headers'], 'application/hal+json;'), '"application/hal+json" found in valid request.');

    // Invalid request.
    $result = $this->httpRequest('api/v1/articles/', \RestfulInterface::GET, array('sort' => 'invalid_key'));
    $this->assertTrue(strpos($result['headers'], 'application/problem+json;'), '"application/problem+json" found in valid request.');

    // Switch site to offline mode.
    variable_set('maintenance_mode', TRUE);
    $this->httpauth_credentials = NULL;
    $result = $this->httpRequest('api/login');
    $this->assertEqual($result['code'], '503', '503 status code sent for site in offline mode.');
  }

  /**
   * Test hijacking of api/* pages and showing proper error messages.
   */
  function testNotFoundDelivery() {
    // Invalid URLs.
    $urls = array(
      'api',
      'api/',
      'api/invalid',
    );

    foreach ($urls as $url) {
      $result = $this->httpRequest($url);
      $this->assertEqual($result['code'], '404', format_string('404 status code sent for @url url.', array('@url' => $url)));
      $this->assertTrue(strpos($result['headers'], 'application/problem+json;'), '"application/problem+json" found in invalid request.');
    }

    // Non-related url.
    $result = $this->httpRequest('api-api');
    $this->assertEqual($result['code'], '404', format_string('404 status code sent for @url url.', array('@url' => $url)));
    $this->assertFalse(strpos($result['headers'], 'application/problem+json;'), 'Only correct URL is hijacked.');
  }
}
