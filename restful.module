<?php

/**
 * @file
 * Turn Drupal to a RESTful server, following best practices.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function restful_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Add defaults values to the restful related plugins.
 */
function restful_plugin_process(&$plugin, $info) {
  // Common operations.
  $plugin += array(
    'description' => '',
  );

  // Call the plugin specific process functions.
  $function = 'restful_plugin_process_' . $info['type'];
  if (function_exists($function)) {
    $function($plugin, $info);
  }
}

/**
 * Add defaults values to the restful related plugins.
 *
 * Properties for the "restful" plugin type:
 * - description: The description of the resource. Defaults to empty string.
 * - major_version: The major version of the resource. This will change the URL
 *   of the resource endpoint. For example setting major version to 2 for the
 *   "articles" resource will result with "api/v2/articles" as the URL. Defaults
 *   to 1.
 * - minor_version: The minor version of the resource. Setting the minor version
 *   via CURL is done by setting HTTP_X_RESTFUL_MINOR_VERSION in the HTTP headers.
 *   Defaults to 0.
 * - options: Array of options needed for the plugin. See
 *   "per_role_content__1_0.inc" in RESTful example module. Defaults to empty
 *   array.
 * - entity type: The entity type of the resource. Defaults to FALSE, which
 *   indicates the resource isn't connected to any entity type.
 * - bundle: The name of a single bundle the resource is connected to. Defaults
 *   to FALSE.
 * - authentication_types: TRUE or Array with name of authentication providers
 *   that should "protect" the resource, and ensure only authenticated users can
 *   use it. If set to TRUE, then all the existing authentication providers
 *   would be used until the user is authenticated. If user was not
 *   authenticated with any of the authentication providers, an
 *   \RestfulUnauthorizedException exception would be thrown.
 *   Defaults to empty array, which means no authentication is done by default.
 * - authentication_optional: If "authentication_types" and TRUE this determines
 *   if the resource may be accessed by an anonymous user when no provider was
 *   able to authenticate the user. Otherwise a \RestfulUnauthorizedException
 *   exception would be thrown.
 * - hook_menu: Determines if RESTful module should declare the resource in its
 *   pwn hook_menu(). If FALSE, it is up to the implementing module to declare
 *   it. Defaults to TRUE.
 * - cache: Stores the cache settings. An associative array with:
 *   - render: Set it to FALSE to disable the render cache completely
 *     Defaults to FALSE.
 *   - class: The cache class for this resource. Defaults to NULL, which
 *     will probably end up resolving to 'DrupalDatabaseCache'.
 *   - bin: The name of the bin. It is the developer's responsibility to
 *     create this bin in the cache backend if it does not exist. Defaults to
 *     'cache_restful'.
 *   - expire: TTL for the cache records. See DrupalCacheInterface::set()
 *     for the allowed values. Defaults to CACHE_PERMANENT.
 *   - simple_invalidate: Set it to false to prevent the RESTful module to
 *     invalidate any cache it may have been generated. The developer will be
 *     responsible to invalidate caches in this scenario. Defaults to TRUE.
 * - rate_limit: The configuration array for the rate limits. There is a special
 *   limit category called 'global' that will not be limited to resource but
 *   will aggregate all request hits across all resources. To enable the global
 *   limit set the variable 'restful_global_rate_limit' to the desired limit and
 *   'restful_global_rate_period' to the wanted period.
 *   - period: A \DateInterval object representing the period on which the rate
 *     limitations apply.
 *   - event: The name of the event to limit as declared in the rate_limit
 *     plugin.
 *   - limits: An associative array with the number of allowed requests in the
 *     selected period for every role.
 *     array(
 *       'request' => array(
 *         'event' => 'request',
 *         'period' => new \DateInterval('P1D'),
 *         'limits' => array(
 *           'authenticated user' => 100,
 *           'anonymous user' => 10,
 *           'administrator' => \RestfulRateLimitManager::UNLIMITED_RATE_LIMIT,
 *         ),
 *       ),
 *     ),
 * - autocomplete: Stores the autocomplete settings. An associative array with:
 *   - enable: Determines if the autocomplete functionality should be used.
 *     Defaults to TRUE.
 *   - range: Determines how many matches should return on every query. Defaults
 *     to 10.
 *   - operator: Determines the operator used to match the given string. Values
 *     can be 'STARTS_WITH' or 'CONTAINS'. Defaults to 'CONTAINS'.
 * - formatter: The name of the formatter plugin. It defaults to the contents of
 *   the variable 'restful_default_output_formatter'. If the variable is empty
 *   it defaults to 'hal_json'.
 * Properties for the "authentication" plugin type:
 * - description: The description of the authentication provider. Defaults to
 *   empty string.
 * - settings: Array with the settings needed for the plugin. Defaults to empty
 *   array.
 */
function restful_plugin_process_restful(&$plugin, $info) {
  $plugin += array(
    'major_version' => 1,
    'minor_version' => 0,
    'options' => array(),
    'entity_type' => FALSE,
    'bundle' => FALSE,
    'authentication_types' => array(),
    'authentication_optional' => FALSE,
    'hook_menu' => TRUE,
    'cache' => array(),
    'autocomplete' => array(),
  );

  $plugin['cache'] += array(
    'render' => FALSE,
    'class' => NULL,
    'bin' => 'cache_restful',
    'expire' => CACHE_PERMANENT,
    'simple_invalidate' => TRUE,
  );

  $plugin['autocomplete'] += array(
    'enable' => TRUE,
    'operator' => 'CONTAINS',
    'range' => 10,
  );

  if (!empty($plugin['rate_limit'])) {
    foreach ($plugin['rate_limit'] as $event_name => $rate_limit_info) {
      $plugin['rate_limit'][$event_name]['limits'] += array('anonymous user' => 0);
    }
  }

  // Set the global limit. This limit is always attached, but it can be
  // disabled by unsetting the variable 'restful_global_rate_limit'. The
  // global limit can be overridden in the restful plugin definition.
  if (empty($plugin['rate_limit']['global'])) {
    $plugin['rate_limit'] = empty($plugin['rate_limit']) ? array() : $plugin['rate_limit'];
    // Setup the global limits to the variable value.
    $plugin['rate_limit']['global'] = array(
      'event' => 'global',
      'period' => new \DateInterval(variable_get('restful_global_rate_period', 'P1D')),
      'limits' => array(),
    );
  }

  if ($plugin['hook_menu'] && empty($plugin['menu_item'])) {
    // Set a default menu item.
    $base_path = variable_get('restful_hook_menu_base_path', 'api');
    $base_path .= '/v' . $plugin['major_version'];
    $plugin['menu_item'] = $base_path . '/' . $plugin['resource'];
  }
}

/**
 * Add defaults values to the restful related plugins.
 *
 * Properties for the "authentication" plugin type:
 * - description: The description of the event. Defaults to an empty string.
 * - name: The name of the event.
 * - class: Name of the class implementing RestfulRateLimitInterface.
 */
function restful_plugin_process_authentication(&$plugin, $info) {
  $plugin += array(
    'settings' => array(),
  );
}

/**
 * Add defaults values to the restful related plugins.
 *
 * Properties for the "rate_limit" plugin type:
 * - description: The description of the event. Defaults to an empty string.
 * - name: The name of the event.
 * - class: Name of the class implementing RestfulRateLimitInterface.
 */
function restful_plugin_process_rate_limit(&$plugin, $info) {
  // Nothing to be done.
}

/**
 * Add defaults values to the restful related plugins.
 *
 * Properties for the "formatter" plugin type:
 * - description: The description of the formatter. Defaults to an empty string.
 * - name: The name of the formatter.
 * - class: Name of the class implementing RestfulFormatterInterface.
 */
function restful_plugin_process_formatter(&$plugin, $info) {
  // Nothing to be done.
}

/**
 * Implements hook_ctools_plugin_type().
 */
function restful_ctools_plugin_type() {
  $plugins['authentication'] = $plugins['restful'] = $plugins['rate_limit'] = $plugins['formatter'] = array(
    'classes' => array('class'),
    'process' => 'restful_plugin_process',
  );
  $plugins['restful']['child plugins'] = TRUE;
  return $plugins;
}


/**
 * Include CTools plugins and get all restful plugins.
 *
 * @return array
 *   All plugins for restful resources.
 */
function restful_get_restful_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('restful', 'restful');
}

/**
 * Include CTools plugins and get all authentication plugins.
 *
 * @return array
 *   All plugins for restful authentication.
 */
function restful_get_authentication_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('restful', 'authentication');
}

/**
 * Include CTools plugins and get all rate_limit plugins.
 *
 * @return array
 *   All the restful rate_limit plugins.
 */
function restful_get_rate_limit_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('restful', 'rate_limit');
}

/**
 * Include CTools plugins and get all formatter plugins.
 *
 * @return array
 *   All the restful formatter plugins.
 */
function restful_get_formatter_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('restful', 'formatter');
}

/**
 * Include CTools plugins and get the specified authentication plugin.
 *
 * @param string $plugin_name
 *   If provided this function only returns the selected plugin.
 *
 * @return array
 *   The selected plugin for restful authentication.
 */
function restful_get_authentication_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('restful', 'authentication', $plugin_name);
}

/**
 * Include CTools plugins and get the specified formatter plugin.
 *
 * @param string $plugin_name
 *   If provided this function only returns the selected plugin.
 *
 * @return array
 *   The selected plugin for restful formatter.
 */
function restful_get_formatter_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('restful', 'formatter', $plugin_name);
}

/**
 * Include CTools plugins and get the specified rate_limit plugin.
 *
 * @param string $plugin_name
 *   If provided this function only returns the selected plugin.
 *
 * @return array
 *   The selected plugin for rate limits.
 */
function restful_get_rate_limit_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('restful', 'rate_limit', $plugin_name);
}

/**
 * Implements hook_menu().
 */
function restful_menu() {
  $base_path = variable_get('restful_hook_menu_base_path', 'api');
  $items = array();
  foreach (restful_get_restful_plugins() as $plugin) {
    if (!$plugin['hook_menu']) {
      // Plugin explicitly declared no hook menu should be created automatically
      // for it.
      continue;
    }

    $items[$plugin['menu_item']] = array(
      'title' => $plugin['name'],
      'access callback' => 'restful_menu_access_callback',
      'access arguments' => array(1, 2),
      'page callback' => 'restful_menu_process_callback',
      'page arguments' => array(1, 2),
      'delivery callback' => 'restful_formatted_delivery',
      'type' => MENU_CALLBACK,
    );
  }

  // A special login endpoint, that returns a JSON output along with the Drupal
  // authentication cookie.
  if (variable_get('restful_user_login_menu_item', TRUE)) {
    $items[$base_path . '/login'] = array(
      'title' => 'Login',
      'description' => 'Login using base auth and recieve a JSON response along with an authentication cookie.',
      'access callback' => 'user_is_anonymous',
      'page callback' => 'restful_menu_process_callback',
      'page arguments' => array('1', 'login_cookie'),
      'delivery callback' => 'restful_formatted_delivery',
      'type' => MENU_CALLBACK,
    );
  }

  // A special file upload endpoint, that returns a JSON with the newly saved
  // files.
  if (variable_get('restful_file_upload', FALSE)) {
    $items[$base_path . '/file-upload'] = array(
      'title' => 'File upload',
      'access callback' => 'restful_menu_access_callback',
      'access arguments' => array('v1', 'files'),
      'page callback' => 'restful_menu_process_callback',
      'page arguments' => array('1', 'files'),
      'delivery callback' => 'restful_formatted_delivery',
      'type' => MENU_CALLBACK,
    );
  }

  $items[$base_path . '/session/token'] = array(
    'page callback' => 'restful_menu_process_callback',
    'page arguments' => array('1', 'csrf_token'),
    'access callback' => 'restful_menu_access_callback',
    'access arguments' => array('v1', 'csrf_token'),
    'delivery callback' => 'restful_unprepared_delivery',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Return the handler based on major and minor version, and resource name.
 *
 * @param $resource_name
 *   The name of the resource (e.g. "articles").
 * @param int $major_version
 *   (optional) The major version (not prefixed with "v"). Defaults to 1.
 * @param int $minor_version
 *   (optional) The minor version. Defaults to 0.
 *
 * @return RestfulInterface | NULL
 *   The handler object if found, or NULL.
 */
function restful_get_restful_handler($resource_name, $major_version = 1, $minor_version = 0) {
  $cache = &drupal_static(__FUNCTION__);
  $identifier = implode(':', array($major_version, $resource_name, $minor_version));
  if (isset($cache[$identifier])) {
    return $cache[$identifier];
  }

  $cache[$identifier] = NULL;


  // Array with all the handlers with the same major version and resource name.
  // We get all of them, so we can find the correct one if minor version is
  // present.
  $valid_plugins = array();
  foreach (restful_get_restful_plugins() as $plugin) {
    if ($plugin['major_version'] != $major_version) {
      continue;
    }

    if ($plugin['resource'] != $resource_name) {
      continue;
    }

    if ($minor_version == $plugin['minor_version']) {
      // We found out handler, so we can break.
      $valid_plugins[$plugin['minor_version']] = $plugin;
      break;
    }

    if ($plugin['minor_version'] > $minor_version) {
      // Minor version is above the needed one.
      continue;
    }

    $valid_plugins[$plugin['minor_version']] = $plugin;
  }

  if (!$valid_plugins) {
    return;
  }

  // Sort the handlers, and get the last one, as it is the closest one to the
  // requested minor version.
  ksort($valid_plugins);
  $plugin = end($valid_plugins);

  $cache[$identifier] = restful_get_restful_handler_by_name($plugin['name']);

  return $cache[$identifier];
}

/**
 * Return the handler based on major and minor version, and resource name.
 *
 * @param $plugin_name
 *   The name of the plugin, including version. (e.g. "articles__1_2").
 *
 * @return RestfulInterface | NULL
 *   The handler object if found, or NULL.
 *
 * @throws \RestfulException
 */
function restful_get_restful_handler_by_name($plugin_name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('restful', 'restful', $plugin_name);
  if (!$class = ctools_plugin_load_class('restful', 'restful', $plugin_name, 'class')) {
    throw new \RestfulServiceUnavailable('Restful plugin class not found.');
  }
  $handler = new $class($plugin);
  // If the restful plugin needs authentication load the corresponding
  // authentication plugin.

  // Handler set explicitly to allow all authentication types.
  $auth_plugins = $plugin['authentication_types'] === TRUE ? array_keys(restful_get_authentication_plugins()) : $plugin['authentication_types'];

  // We can have multiple authentication plugins.
  foreach ($auth_plugins as $auth_plugin_name) {
    $auth_handler = restful_get_authentication_handler($auth_plugin_name);
    $handler->getAuthenticationManager()->addAuthenticationProvider($auth_handler);
  }

  // Set the "optional" flag of the authentication manager.
  $handler->getAuthenticationManager()->setIsOptional($plugin['authentication_optional']);

  return $handler;
}

/**
 * Return the authentication handler based on the authentication plugin name.
 *
 * @param string $auth_plugin_name
 *   Name of the authentication plugin.
 *
 * @return \RestfulAuthenticationInterface
 *   The authentication provider object.
 *
 * @throws \RestfulException if the authentication provider does not exist.
 */
function restful_get_authentication_handler($auth_plugin_name) {
  $auth_plugin = restful_get_authentication_plugin($auth_plugin_name);
  if (!$auth_class = ctools_plugin_get_class($auth_plugin, 'class')) {
    throw new \RestfulServiceUnavailable('Authentication plugin class not found.');
  }
  return new $auth_class($auth_plugin);
}

/**
 * Return the formatter handler based on the formatter plugin name.
 *
 * @param string $formatter_plugin_name
 *   Name of the formatter plugin.
 *
 * @param \RestfulBase $restful_handler
 *   The resource handler.
 *
 * @return \RestfulAuthenticationInterface
 *   The formatter provider object.
 *
 * @throws \RestfulException if the formatter provider does not exist.
 */
function restful_get_formatter_handler($formatter_plugin_name, $restful_handler) {
  $formatter_plugin = restful_get_formatter_plugin($formatter_plugin_name);
  if (!$formatter_class = ctools_plugin_get_class($formatter_plugin, 'class')) {
    throw new \RestfulServiceUnavailable('Formatter plugin class not found.');
  }
  return new $formatter_class($formatter_plugin, $restful_handler);
}

/**
 * Helper function to get the restful handler for the selected path.
 *
 * @param string $path
 *   The path you want to get the handler for. Defaults to the current page.
 *
 * @return \RestfulEntityBase
 *   The restful handler or NULL.
 */
function restful_get_restful_handler_for_path($path = NULL) {
  $handlers = &drupal_static(__FUNCTION__);
  $path = is_null($path) ? $_GET['q'] : $path;
  if (isset($handlers[$path])) {
    return $handlers[$path];
  }
  $router_item = menu_get_item($path);
  // We can only get the information if the current path was processed by
  // restful_menu_process_callback.
  if ($router_item['page_callback'] != 'restful_menu_process_callback') {
    $handlers[$path] = FALSE;
    return;
  }
  list($major_version, $resource) = $router_item['page_arguments'];
  $major_version = intval(str_replace('v', '', $major_version));
  $minor_version = !empty($_SERVER['HTTP_X_RESTFUL_MINOR_VERSION']) && is_numeric($_SERVER['HTTP_X_RESTFUL_MINOR_VERSION']) ? $_SERVER['HTTP_X_RESTFUL_MINOR_VERSION'] : 0;
  $handlers[$path] = restful_get_restful_handler($resource, $major_version, $minor_version);
  return $handlers[$path];
}

/**
 * Access callback; Determine access for an API call.
 *
 * @param $major_version
 *   The major version, prefixed with v (e.g. v1, v2).
 * @param $resource_name
 *   The name of the resource (e.g. "articles").
 *
 * @return bool
 *   TRUE if user is allowed to access resource.
 */
function restful_menu_access_callback($major_version, $resource_name) {
  if ($major_version[0] != 'v') {
    // Major version not prefixed with "v".
    return;
  }

  if (!$major_version = intval(str_replace('v', '', $major_version))) {
    // Major version is not an integer.
    return;
  }

  $minor_version = !empty($_SERVER['HTTP_X_RESTFUL_MINOR_VERSION']) && is_int($_SERVER['HTTP_X_RESTFUL_MINOR_VERSION']) ? $_SERVER['HTTP_X_RESTFUL_MINOR_VERSION'] : 0;
  if (!$handler = restful_get_restful_handler($resource_name, $major_version, $minor_version)) {
    return;
  }

  if (!\RestfulBase::isValidMethod($_SERVER['REQUEST_METHOD'], FALSE)) {
    return;
  }

  $method = strtoupper($_SERVER['REQUEST_METHOD']);
  if ($method == \RestfulInterface::POST && !empty($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) {
    $method = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']);
  }

  if (!\RestfulBase::isValidMethod($method, FALSE)) {
    // HTTP method is invalid.
    return;
  }

  return $handler->access();
}

/**
 * Page callback; Return the response for an API call.
 *
 * @param $major_version
 *   The major version, prefixed with v (e.g. v1, v2).
 * @param $resource_name
 *   The name of the resource (e.g. "articles").
 *
 * @return string
 *   JSON output with the result of the API call.
 *
 * @see http://tools.ietf.org/html/draft-nottingham-http-problem-06
 */
function restful_menu_process_callback($major_version, $resource_name) {
  $major_version = intval(str_replace('v', '', $major_version));
  $minor_version = !empty($_SERVER['HTTP_X_RESTFUL_MINOR_VERSION']) && is_numeric($_SERVER['HTTP_X_RESTFUL_MINOR_VERSION']) ? $_SERVER['HTTP_X_RESTFUL_MINOR_VERSION'] : 0;
  $handler = restful_get_restful_handler($resource_name, $major_version, $minor_version);
  // If there is a minor version we need to Vary the response.
  if ($minor_version) {
    $headers = $handler->getHttpHeaders();
    $vary = empty($headers['Vary']) ? '' : $headers['Vary'];
    $handler->setHttpHeaders('Vary', $vary . ',X-Restful-Minor-Version');
  }

  $path = func_get_args();
  unset($path[0], $path[1]);
  $path = implode('/', $path);

  $method = strtoupper($_SERVER['REQUEST_METHOD']);

  if ($method == \RestfulInterface::POST && !empty($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) {
    $method = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']);
  }

  if ($method == \RestfulInterface::OPTIONS) {
    // OPTIONS method is a special case that might be sent by the browser
    // before the actual method to check for CORS (known as preflight OPTIONS).
    drupal_add_http_header('Status', 204);
    drupal_add_http_header('Content-Type', 'application/hal+json; charset=utf-8');
    return;
  }

  $method = strtolower($method);
  $request = restful_parse_request();

  try {
    return $handler->{$method}($path, $request);
  }
  catch (RestfulException $e) {
    $result = array(
      'type' => $e->getType(),
      'title' => $e->getMessage(),
      'status' => $e->getCode(),
      'detail' => $e->getDescription(),
    );

    if ($instance = $e->getInstance()) {
      $result['instance'] = $instance;
    }

    if ($errors = $e->getFieldErrors()) {
      $result['errors'] = $errors;
    }
  }
  catch (Exception $e) {
    $result = array(
      'type' => 'http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1',
      'title' => $e->getMessage(),
      'status' => 500,
    );
  }

  // Adhere to the API Problem draft proposal.
  drupal_add_http_header('Status', $result['status']);
  drupal_add_http_header('Content-Type', 'application/problem+json; charset=utf-8');
  return $result;
}

/**
 * Build the request array from PHP globals and input stream.
 *
 * @return array
 *   The request array.
 */
function restful_parse_request() {
  $request = NULL;
  $method = strtoupper($_SERVER['REQUEST_METHOD']);

  if ($method == \RestfulInterface::GET) {
    $request = $_GET;
  }
  elseif ($method == \RestfulInterface::POST) {
    $request = $_POST;
  }

  if (!$request && $query_string = file_get_contents('php://input')) {
    // When trying to POST using curl on simpleTest it doesn't reach
    // $_POST, so we try to re-grab it here.
    parse_str($query_string, $request);
  }


  // This flag is used to identify if the request is done "via Drupal" or "via
  // CURL";
  $request['__application'] = array(
    'rest_call' => TRUE,
    'csrf_token' => !empty($_SERVER['HTTP_X_CSRF_TOKEN']) ? $_SERVER['HTTP_X_CSRF_TOKEN'] : NULL,
  );

  // Allow implemeting modules to alter the request.
  drupal_alter('restful_parse_request', $request);

  return $request;
}

/**
 * Returns data in JSON format.
 *
 * We do not use drupal_json_output(), in order to maintain the "Content-Type"
 * header.
 *
 * @param $var
 *   (optional) If set, the variable will be converted to JSON and output.
 * @param string $method
 *   Name of the method for the formatter.
 *
 * @see restful_menu_process_callback()
 */
function restful_delivery($var = NULL, $method = 'format') {
  if (!isset($var)) {
    return;
  }

  if (is_int($var)) {
    _restful_get_json_from_menu_status($var);

    // Adhere to the API Problem draft proposal.
    drupal_add_http_header('Status', $var['status']);
    drupal_add_http_header('Content-Type', 'application/problem+json; charset=utf-8');
  }

  // Get the formatter for the current resource.
  if ($restful_handler = restful_get_restful_handler_for_path()) {
    // Allow the handler to change the HTTP headers.
    foreach ($restful_handler->getHttpHeaders() as $key => $value) {
      drupal_add_http_header($key, $value);
    }
  }
  try {
    $formatter_handler = restful_output_format($restful_handler);
    $output = $formatter_handler->{$method}($var);
  }
  catch (\RestfulException $e) {
    // Handle if the formatter does not exist.
    drupal_add_http_header('Status', $e->getCode());
    echo $e->getMessage();
    return;
  }

  // The content type header is modified after the massaging if there is an
  // error code. Therefore we need to set the content type header after
  // formatting the output.
  drupal_add_http_header('Content-Type', $formatter_handler->getContentTypeHeader());

  echo $output;
}

/**
 * Helper function to get the default output format from the current request.
 *
 * @param \RestfulBase $restful_handler
 *   The restful handler for the formatter.
 *
 * @return \RestfulFormatterBase
 *   The formatter plugin to use.
 */
function restful_output_format(\RestfulBase $restful_handler = NULL) {
  $restful_handler = $restful_handler ? $restful_handler : restful_get_restful_handler_for_path();
  if ($restful_handler && $formatter_name = $restful_handler->getPluginInfo('formatter')) {
    return restful_get_formatter_handler($formatter_name, $restful_handler);
  }
  // Sometimes we will get a default Accept: */* in that case we want to return
  // the default content type and not just any.
  if (!empty($GLOBALS['_SERVER']['HTTP_ACCEPT']) && $GLOBALS['_SERVER']['HTTP_ACCEPT'] != '*/*') {
    foreach (explode(',', $GLOBALS['_SERVER']['HTTP_ACCEPT']) as $accepted_content_type) {
      // Loop through all the formatters and find the first one that matches the
      // Content-Type header.
      foreach (restful_get_formatter_plugins() as $formatter_info) {
        $formatter = restful_get_formatter_handler($formatter_info['name'], $restful_handler);
        if (restfult_match_content_type($formatter->getContentTypeHeader(), $accepted_content_type)) {
          return $formatter;
        }
      }
    }
  }
  $formatter_name = variable_get('restful_default_output_formatter', 'hal_json');
  return restful_get_formatter_handler($formatter_name, $restful_handler);
}

/**
 * Matches a string with path style wildcards.
 *
 * @param string $content_type
 *   The string to check.
 * @param string $pattern
 *   The pattern to check against.
 *
 * @return bool
 *   TRUE if the input matches the pattern.
 *
 * @see drupal_match_path().
 */
function restfult_match_content_type($content_type, $pattern) {
  $regexps = &drupal_static(__FUNCTION__);

  if (!isset($regexps[$pattern])) {
    // Convert path settings to a regular expression.
    $to_replace = array(
      '/\\\\\*/', // asterisks
    );
    $replacements = array(
      '.*',
    );
    $patterns_quoted = preg_quote($pattern, '/');

    // This will turn 'application/*' into '/^(application\/.*)(;.*)$/' allowing
    // us to match 'application/json; charset: utf8'
    $regexps[$pattern] = '/^(' . preg_replace($to_replace, $replacements, $patterns_quoted) . ')(;.*)?$/i';
  }
  return (bool) preg_match($regexps[$pattern], $content_type);
}

/**
 * Returns data in JSON format using data preparation in the formatter plugin.
 *
 * @param $var
 *   (optional) If set, the variable will be converted to JSON and output.
 *
 * @see restful_menu_process_callback()
 */
function restful_formatted_delivery($var = NULL) {
  restful_delivery($var, 'format');
}

/**
 * Returns data in JSON format not using data preparation in the formatter
 * plugin.
 *
 * @param $var
 *   (optional) If set, the variable will be converted to JSON and output.
 *
 * @see restful_menu_process_callback()
 */
function restful_unprepared_delivery($var = NULL) {
  restful_delivery($var, 'render');
}

/**
 * Convert a menu status response to a valid JSON.
 *
 * @param int $var
 *   The integer value of the menu status, passed by reference.
 */
function _restful_get_json_from_menu_status(&$var) {
  switch ($var) {
    case MENU_NOT_FOUND:
      $class_name = 'RestfulNotFoundException';
      $message = 'Invalid URL path.';
      break;

    case MENU_ACCESS_DENIED:
      $class_name = 'RestfulForbiddenException';
      $message = 'Access denied.';
      break;

    case MENU_SITE_OFFLINE:
      $class_name = 'RestfulServiceUnavailable';
      $message = 'Site is offline.';
      break;
  }

  $e = new $class_name($message);

  $var = array(
    'type' => $e->getType(),
    'title' => $e->getMessage(),
    'status' => $e->getCode(),
    'detail' => $e->getDescription(),
  );

  if ($instance = $e->getInstance()) {
    $var['instance'] = $instance;
  }

  if ($errors = $e->getFieldErrors()) {
    $var['errors'] = $errors;
  }
}


/**
 * Implements hook_page_delivery_callback_alter().
 *
 * Hijack api/* to be under RESTful. We make sure that any call to api/* pages
 * that isn't valid, will still return with a well formatted error, instead of
 * a 404 HTML page.
 */
function restful_page_delivery_callback_alter(&$callback) {
  if (!variable_get('restful_hijack_api_pages', TRUE)) {
    return;
  }

  $base_path = variable_get('restful_hook_menu_base_path', 'api');


  if (strpos($_GET['q'], $base_path . '/') !== 0 && $_GET['q'] != $base_path) {
    // Page doesn't start with the base path (e.g. "api" or "api/").
    return;
  }

  if (menu_get_item()) {
    // Path is valid (i.e. not 404).
    return;
  }

  $callback = 'restful_deliver_menu_not_found';
}

/**
 * Delivers a not found (404) error.
 */
function restful_deliver_menu_not_found($page_callback_result) {
  restful_delivery(MENU_NOT_FOUND);
}


/**
 * Implements hook_entity_info().
 */
function restful_entity_info() {
  $items['rate_limit'] = array(
    'label' => t('Rate limit'),
    'entity class' => 'RestfulRateLimit',
    'controller class' => 'EntityAPIController',
    'base table' => 'restful_rate_limit',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'rlid',
      'label' => 'identifier',
      'bundle' => 'event',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'module' => 'restful',
    'entity cache' => module_exists('entitycache'),
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function restful_cron() {
  // Clear the expired restful_rate_limit entries.
  $query = new \EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'rate_limit')
    ->propertyCondition('expiration', REQUEST_TIME, '>')
    ->execute();
  if (!empty($results['rate_limit'])) {
    $rlids = array_keys($results['rate_limit']);
    entity_delete_multiple('rate_limit', $rlids);
  }
}

/**
 * Implements hook_entity_update().
 */
function restful_entity_update($entity, $type) {
  list($entity_id) = entity_extract_ids($type, $entity);
  $cid = 'paet:' . $type . '::ei:' . $entity_id;
  _restful_invalidate_entity_cache($cid);
}

/**
 * Implements hook_entity_delete().
 */
function restful_entity_delete($entity, $type) {
  list($entity_id) = entity_extract_ids($type, $entity);
  $cid = 'paet:' . $type . '::ei:' . $entity_id;
  _restful_invalidate_entity_cache($cid);
}

/**
 * Implements hook_user_update().
 */
function restful_user_update(&$edit, $account, $category) {
  // Due to the limitations for cid matching on clearing caches, we need to
  // clear all the bin. We cannot do $cid = '%::uu' . $account->uid . '::pa';
  _restful_invalidate_entity_cache('*');
}

/**
 * Implements hook_user_delete().
 */
function restful_user_delete($account) {
  // Due to the limitations for cid matching on clearing caches, we need to
  // clear all the bin. We cannot do $cid = '%::uu' . $account->uid . '::pa';
  _restful_invalidate_entity_cache('*');
}

/**
 * Delete cached entities from all the cache bins associated to restful
 * resources.
 *
 * @param string $cid
 *   The wildcard cache id to invalidate.
 */
function _restful_invalidate_entity_cache($cid) {
  $plugins = restful_get_restful_plugins();
  foreach ($plugins as $plugin) {
    $handler = restful_get_restful_handler($plugin['resource'], $plugin['major_version'], $plugin['minor_version']);
    $reflector = new \ReflectionClass($handler);
    if ($reflector->hasMethod('cacheInvalidate')) {
      $version = $handler->getVersion();
      // Get the uid for the invalidation.
      try {
        $uid = $handler->getAccount(FALSE)->uid;
      }
      catch (\RestfulUnauthorizedException $e) {
        // If no user could be found using the handler default to the logged in
        // user.
        $uid = $GLOBALS['user']->uid;
      }
      $version_cid = 'v' . $version['major'] . '.' . $version['minor'] . '::uu' . $uid;
      $handler->cacheInvalidate($version_cid . '::' . $cid);
    }
  }
}

/**
 * Page callback: returns a session token for the currently active user.
 */
function restful_csrf_session_token() {
  return array('X-CSRF-Token' => drupal_get_token(\RestfulInterface::TOKEN_VALUE));
}
